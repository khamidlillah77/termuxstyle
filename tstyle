#!/data/data/com.termux/files/usr/bin/bash

## Author  : kps

## A simple script to change color-schemes & fonts of termux terminal emulator.

## ANSI Colors (FG & BG)
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')"
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"
DEFAULT_FG="$(printf '\033[39m')"  DEFAULT_BG="$(printf '\033[49m')"

## Directories
PREFIX='/data/data/com.termux/files/usr'
TERMUX_DIR="$HOME/.termux"
COLORS_DIR="$PREFIX/share/termux-style/colors"
FONTS_DIR="$PREFIX/share/termux-style/fonts"

## Banner
banner () {
    clear
    echo "
    ${BLUE}┌──────────────────────────────────────────────────┐
    ${BLUE}│${RED}░▀█▀░█▀▀░█▀▄░█▄█░█░█░█░█${ORANGE}░░░░░${GREEN}█▀▀░▀█▀░█░█░█░░░█▀▀░░${BLUE}│
    ${BLUE}│${RED}░░█░░█▀▀░█▀▄░█░█░█░█░▄▀▄${ORANGE}░▄▄▄${RED}░${GREEN}▀▀█░░█░░░█░░█░░░█▀▀░░${BLUE}│
    ${BLUE}│${RED}░░▀░░▀▀▀░▀░▀░▀░▀░▀▀▀░▀░▀${ORANGE}░░░░░${GREEN}▀▀▀░░▀░░░▀░░▀▀▀░▀▀▀░░${BLUE}│
    ${BLUE}└──────────────────────────────────────────────────┘
    ${BLUE}[${RED}*${BLUE}] ${ORANGE}By- kps ${RED}//${ORANGE} ks compat"
}

## Script Termination
exit_on_signal_SIGINT () {
    { printf "\n\n%s\n" "    ${BLUE}[${RED}*${BLUE}] ${RED}Script interrupted." 2>&1; echo; reset_color; }
    exit 0
}

exit_on_signal_SIGTERM () {
    { printf "\n\n%s\n" "    ${BLUE}[${RED}*${BLUE}] ${RED}Script terminated." 2>&1; echo; reset_color; }
    exit 0
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTERM SIGTERM

## Reset terminal colors
reset_color() {
	tput sgr0   # reset attributes
	tput op     # reset color
    return
}

## Available color-schemes & fonts
check_files () {
    if [[ "$1" = colors ]]; then
        colors=($(ls $COLORS_DIR))
        echo ${#colors[@]}
    elif [[ "$1" = fonts ]]; then
        fonts=($(ls $FONTS_DIR))
        echo ${#fonts[@]}
    fi
    return
}

total_colors=$(check_files colors)
total_fonts=$(check_files fonts)

## Reload Settings
reload_settings () {
    echo "    ${BLUE}[${RED}*${BLUE}] ${MAGENTA}Reloading Settings..."
    am broadcast --user 0 -a com.termux.app.reload_style com.termux > /dev/null
    { echo "    ${BLUE}[${RED}*${BLUE}] ${GREEN}Applied Successfully."; echo; }
    return
}

## Apply color-schemes
apply_colors () {
    local count=1

    # List the color-schemes
    color_schemes=($(ls $COLORS_DIR))
    for colors in "${color_schemes[@]}"; do
        colors_name=$(echo $colors)
        echo ${ORANGE}"    [$count] ${colors_name%.*}"
        count=$(($count+1))
    done

    # Read user selection
    { echo; read -p ${BLUE}"    [${RED}Select Color Scheme (1 to $total_colors)${BLUE}]: ${GREEN}" answer; echo; }

    # Apply color-scheme
    if [[ (-n "$answer") && ("$answer" -le $total_colors) ]]; then
        scheme=${color_schemes[(( answer - 1 ))]}
        echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Applying Color Scheme..."
        cp $COLORS_DIR/$scheme $TERMUX_DIR/colors.properties
        if [[ ! -f "$TERMUX_DIR/.current_color" ]]; then
			touch "$TERMUX_DIR/.current_color"
			echo "$scheme" > "$TERMUX_DIR/.current_color"
        else
			echo "$scheme" > "$TERMUX_DIR/.current_color"
        fi
        { reload_settings; reset_color; exit; }
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; apply_colors; }
    fi
    return
}

## Apply fonts
apply_fonts () {
    local count=1

    # List fonts
    fonts_list=($(ls $FONTS_DIR))
    for fonts in "${fonts_list[@]}"; do
        fonts_name=$(echo $fonts)
        echo ${ORANGE}"    [$count] ${fonts_name%.*}"
        count=$(($count+1))
    done

    # Read user selection
    { echo; read -p ${BLUE}"    [${RED}Select font (1 to $total_fonts)${BLUE}]: ${GREEN}" answer; echo; }

    # Apply fonts
    if [[ (-n "$answer") && ("$answer" -le $total_fonts) ]]; then
        font_ttf=${fonts_list[(( answer - 1 ))]}
        echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Applying Fonts..."
        cp $FONTS_DIR/$font_ttf $TERMUX_DIR/font.ttf
        if [[ ! -f "$TERMUX_DIR/.current_font" ]]; then
			touch "$TERMUX_DIR/.current_font"
			echo "$font_ttf" > "$TERMUX_DIR/.current_font"
        else
			echo "$font_ttf" > "$TERMUX_DIR/.current_font"
        fi
        { reload_settings; reset_color; exit; }
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; apply_fonts; }
    fi
    return
}

## Oh My Zsh
oh-my-zsh () {
   sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}

## Zsh-Autosuggestions
zsh-autosuggestions () {
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
}

## Zsh-Syntaxhighlighting
zsh-syntaxhighlighting () {
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
}

## Zsh-Autocomplete
zsh-autocomplete () {
    git clone https://github.com/marlonrichert/zsh-autocomplete.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autocomplete
}

## powerlevel9k
auto9k () {
    git clone https://github.com/Powerlevel9k/powerlevel9k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel9k
}

## powerlevel10k
auto10k () {
    git clone https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k
}

## Remove termux banner
termux-banner () {
    rm -rf /data/data/com.termux/files/usr/etc/motd
    rm -rf /data/data/com.termux/files/usr/etc/motd.dpkg-old
    rm -rf /data/data/com.termux/files/usr/etc/motd-playstore
    rm -rf /data/data/com.termux/files/usr/etc/motd-playstore.dpkg-old
}

## Random style
random_style () {
    echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Setting Random Style..."
    random_scheme=$(ls $COLORS_DIR | shuf -n 1)
    { cp $COLORS_DIR/$random_scheme $TERMUX_DIR/colors.properties; }
    if [[ ! -f "$TERMUX_DIR/.current_color" ]]; then
		touch "$TERMUX_DIR/.current_color"
		echo "$random_scheme" > "$TERMUX_DIR/.current_color"
    else
		echo "$random_scheme" > "$TERMUX_DIR/.current_color"
    fi
    { reload_settings; reset_color; exit; }
}

## Import files
import_files () {
    echo "    ${BLUE}[${RED}L${BLUE}] ${ORANGE}Local File (Enter path to file)
    ${BLUE}[${RED}I${BLUE}] ${ORANGE}Internet File (Enter File URL)"
    { echo; read -p ${BLUE}"    [${RED}Select Option${BLUE}]: ${GREEN}" option; echo; }

    temp_file=$(mktemp $PREFIX/tmp/termux_XXXXXXXXXX.properties)

    if [[ "$option" =~ ^[l/L/i/I]$ ]]; then
        if [[ "$option" =~ ^[l/L]$ ]]; then
            { read -p ${BLUE}"    [${RED}Enter/Paste Path To Color-scheme${BLUE}]: ${GREEN}" file_path; echo; }
            cp $file_path $TERMUX_DIR/colors.properties
            { reload_settings; reset_color; exit; }
        elif [[ "$option" =~ ^[i/I]$ ]]; then
            { read -p ${BLUE}"    [${RED}Enter Color-scheme URL${BLUE}]: ${GREEN}" file_link; echo; }
            wget -o $PREFIX/tmp/log -O $temp_file $file_link
            cp $temp_file $TERMUX_DIR/colors.properties
            { reload_settings; reset_color; exit; }
        fi
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; import_files; }
    fi
}

## About program
about_program () {
    echo -n ${BLUE}"    ┌──────────────────────────────────────────────────────────────────────────┐
    │  			     ┏━┓┏┓ ┏━┓╻ ╻╺┳╸			               │
    │  			     ┣━┫┣┻┓┃ ┃┃ ┃ ┃ 			               │
    │  			     ╹ ╹┗━┛┗━┛┗━┛ ╹ 			               │
    │──────────────────────────────────────────────────────────────────────────│
    │                                                                          │
    │ >>  'termux-style' is a simple program that provides color               │
    │     schemes and powerline-ready fonts to customize the                   │
    │     appearance of the termux terminal emulator.                          │
    │                                                                          │
    │                                                                          │
    │ >>  Author   :  kps                                                      │
    │     Youtube  :  https://www.youtube.com/channel/UCunwhiBxNWCRylJB7iuzP4g │
    │     Telegram :  https://t.me/AideTermux                                  │
    └──────────────────────────────────────────────────────────────────────────┘"
    { echo; read -p "    ${BLUE}[${RED}*${BLUE}] ${GREEN}Press ${GREENBG}${BLACK} Enter ${DEFAULT_BG}${GREEN} To Return To Main Menu."; }
}

## Main menu
until [[ "$REPLY" =~ ^[q/Q]$ ]]; do
	active_color=`cat $TERMUX_DIR/.current_color`
	active_font=`cat $TERMUX_DIR/.current_font`
    banner
    echo "
    ${BLUE}[${RED}1${BLUE}] ${GREEN}Install [oh-my-zsh]
    ${BLUE}[${RED}2${BLUE}] ${GREEN}Colors ($total_colors) (${CYAN}${active_color%.*}${GREEN})
    ${BLUE}[${RED}3${BLUE}] ${GREEN}Fonts ($total_fonts) (${CYAN}${active_font%.*}${GREEN})
    ${BLUE}[${RED}4${BLUE}] ${GREEN}zsh-autosuggestions
    ${BLUE}[${RED}5${BLUE}] ${GREEN}zsh-syntax-highlighting
    ${BLUE}[${RED}6${BLUE}] ${GREEN}zsh-autocomplete
    ${BLUE}[${RED}7${BLUE}] ${GREEN}powerlevel9k
    ${BLUE}[${RED}8${BLUE}] ${GREEN}powerlevel10k
    ${BLUE}[${RED}9${BLUE}] ${GREEN}Remove termux banner
    ${BLUE}[${RED}R${BLUE}] ${GREEN}Random
    ${BLUE}[${RED}I${BLUE}] ${GREEN}Import
    ${BLUE}[${RED}A${BLUE}] ${GREEN}About
    ${BLUE}[${RED}Q${BLUE}] ${GREEN}Quit
    "

    { read -p ${BLUE}"    [${RED}Select Option${BLUE}]: ${GREEN}"; echo; }

    if [[ "$REPLY" =~ ^[1/2/3/4/5/6/7/8/9/r/R/i/I/a/A/q/Q]$ ]]; then      #validate input
        if [[ "$REPLY" =~ ^[1]$ ]]; then
            oh-my-zsh
        elif [[ "$REPLY" =~ ^[2]$ ]]; then
            apply_colors
        elif [[ "$REPLY" =~ ^[3]$ ]]; then
            apply_fonts
        elif [[ "$REPLY" =~ ^[4]$ ]]; then
            zsh-autosuggestions
        elif [[ "$REPLY" =~ ^[5]$ ]]; then
            zsh-syntaxhighlighting
        elif [[ "$REPLY" =~ ^[6]$ ]]; then
            zsh-autocomplete
        elif [[ "$REPLY" =~ ^[7]$ ]]; then
            auto9k
        elif [[ "$REPLY" =~ ^[8]$ ]]; then
            auto10k
        elif [[ "$REPLY" =~ ^[9]$ ]]; then
            termux-banner
        elif [[ "$REPLY" =~ ^[r/R]$ ]]; then
            random_style
        elif [[ "$REPLY" =~ ^[i/I]$ ]]; then
            import_files
        elif [[ "$REPLY" =~ ^[a/A]$ ]]; then
            about_program
        fi
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        sleep 2
    fi
done
{ echo "    ${BLUE}[${RED}*${BLUE}] ${RED}Bye Bye, Have A Nice Day!"; echo; reset_color; exit 0; }
